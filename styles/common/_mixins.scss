/* =======> Shortcuts for some repeated CSS blocks */

@import "constants";

@mixin create-header() {
  position: relative;
  height: $lottery-header-height;
  background: $base-green;
  @include border-radius-on(top, left);
  @include border-radius-on(top, right);
  border-top: 0.2em solid $base-green-highlight;
  border-bottom: 0.2em solid $base-green-lowlight;

  color: #fff;
  text-align: left;
  line-height: $lottery-header-height;

  span {
    display: inline-block;
    float: left;
    position: relative;
  }

  .ico_wrapper {
    width: 17%;
    text-align: center;
  }

  .ico {
    display: inline-block;
    float: none;
    width: $lottery-circle;
    height: $lottery-circle;
    position: relative;
    top: 0.55em;

    border: 0.15em solid #fff;
    @include border-radius(3em);

    background-position: 50% 50%;
    @include background-size(auto 100%);

  }

  .name {
    width: 29%;
    font-size: 1.7em;
  }
  .name_draws {
    width: 28%;
    font-size: 1.7em;
    span {
      float: none;
    }
  }

  .info {
    margin-right: 0.25em;
    float: right;
    color: $base-dark-green;
    font-size: 2.5em;
    top: 0.1em;
    &.active {
      color: #fff;
    }
    &.slide {
      color: $base-light-yellow;
    }
  }
  .toggle {
    width: $lottery-header-height;
    height: 100%;
    float: right;
    border-left: 0.1em solid $base-green * 0.8;
    &:after {
      display: block;
      width: 100%;
      height: 100%;
      content: 'd';
      position: absolute;
      top: 0;
      left: 0;
      font-size: 1.8em;
      text-align: center;
    }
  }

  &.slide {
    .toggle {
      &:after {
        content: 'n';
        font-size: 1.4em;
      }
    }
  }

  &.active {
    background: $base-green * 0.9;
  }

}

$grad_colour_1: #085344;
$grad_colour_2: #095948;

@mixin set-base-gradient() {
  background-repeat: no-repeat;
  background-position: 0 0;
  background-color: $base-dark-green;
  background-image: inline-image('mobile/bg_gradient.png');
  @include background-size(100% auto);
}

@mixin set-ppicons() {
  font-family: ppicons, Arial, sans-serif;
}

@mixin transform($values) {
  -webkit-transform: $values;
  @if $support-ff {
    -moz-transform: $values;
  }
  @if $support-ms {
    -ms-transform: $values;
  }
  transform: $values;
}

@mixin animation($direction, $fill, $duration, $iterations, $name, $easing) {
  -webkit-animation-direction: $direction;
  @if $support-ff {
    -moz-animation-direction: $direction;
  }
  animation-direction: $direction;

  -webkit-animation-fill-mode: $fill;
  @if $support-ff {
    -moz-animation-fill-mode: $fill;
  }
  animation-fill-mode: $fill;

  -webkit-animation-duration: $duration;
  @if $support-ff {
    -moz-animation-duration: $duration;
  }
  animation-duration: $duration;

  -webkit-animation-name: $name;
  @if $support-ff {
    -moz-animation-name: $name;
  }
  animation-name: $name;

  -webkit-animation-iteration-count: $iterations;
  @if $support-ff {
    -moz-animation-iteration-count: $iterations;
  }
  animation-iteration-count: $iterations;

  -webkit-animation-timing-function: $easing;
  @if $support-ff {
    -moz-animation-timing-function: $easing;
  }
  animation-timing-function: $easing;
}

@mixin keyframes ($name) {
  @-webkit-keyframes $name { @content; }
  @keyframes $name { @content; }
}

@mixin set-clearer() {
  &:after {
    display: block;
    width: auto;
    height: 0;
    content: '';
    clear: both;
  }
}

@mixin set-tab-borders() {
  border: 1px solid $tab-border-colour;
  @include border-radius-on(top, right);
  @include border-radius-on(bottom, left);
  @include border-radius-on(bottom, right);
  @include box-shadow(0 2px 2px #eee);
}

@mixin create-input($width, $height) {
  width: $width - 10px;
  height: $height;
  padding: 0 5px;
  border: 1px solid #efefef;
  border-top: 1px solid #cfcfcf;
  @include border-radius();
  font-size: 1.4em;
  text-align: center;
  line-height: $height;
  @include box-shadow(inset 0 1px 2px #eee);

  &::-webkit-outer-spin-button,
  &::-webkit-inner-spin-button {
    -webkit-appearance: none;
    margin: 0;
  }

}

@mixin set-background($default, $gradStart, $grad1, $grad2) {
  background: $default;
  @include linear-gradient($gradStart, $grad1, $grad2);
}

/* =======> Mixins for various CSS3 effects. */
@mixin border-radius($radius:0.4em) {
  border-radius: $radius;
  @if $support-ff {
    -moz-border-radius: $radius;
  }
  -webkit-border-radius: $radius;
}

@mixin box-shadow($shadow) {
  box-shadow: $shadow;
  @if $support-ff {
    -moz-box-shadow: $shadow;
  }
  -webkit-box-shadow: $shadow;
}

@mixin box-shadow-2($shadow1, $shadow2) {
  box-shadow: $shadow1, $shadow2;
  @if $support-ff {
    -moz-box-shadow: $shadow1, $shadow2;
  }
  -webkit-box-shadow: $shadow1, $shadow2;
}

@mixin box-sizing($method) {
  box-sizing: $method;
  @if $support-ff {
    -moz-box-sizing: $method;
  }
  -webkit-box-sizing: $method;
}

@mixin border-radius-on($vert, $horiz, $radius:0.4em) {
  border-#{$vert}-#{$horiz}-radius: $radius;
  @if $support-ff {
    -moz-border-radius-#{$vert}#{$horiz}: $radius;
  }
  -webkit-border-#{$vert}-#{$horiz}-radius: $radius;
}

@mixin linear-gradient($start, $color1, $color2) {
  background: -webkit-gradient(linear, left top, left bottom, color-stop(1%, $color2), color-stop(100%, $color1));
  background: linear-gradient($start, $color1, $color2);
  background: -o-linear-gradient($start, $color1, $color2);
  @if $support-ms {
    background: -ms-linear-gradient($start, $color1, $color2);
  }
  @if $support-ff {
    background: -moz-linear-gradient($start, $color1, $color2);
  }
  background: -webkit-linear-gradient($start, $color1, $color2);
}

@mixin radial-gradient($color1, $start, $color2, $end) {
  background: $color2;
  @if $support-ff {
    background: -moz-radial-gradient(center, ellipse cover,  $color1 $start, $color2 $end); /* FF3.6+ */
  }
  background: -webkit-gradient(radial, center center, 0px, center center, 100%, color-stop($start, $color1), color-stop($end, $color2)); /* Chrome,Safari4+ */
  background: -webkit-radial-gradient(center, ellipse cover,  $color1 $start, $color2 $end); /* Chrome10+,Safari5.1+ */
  background: -o-radial-gradient(center, ellipse cover,  $color1 $start, $color2 $end); /* Opera 12+ */
  @if $support-ms {
    background: -ms-radial-gradient(center, ellipse cover,  $color1 $start, $color2 $end); /* IE10+ */
  }
  background: radial-gradient(ellipse at center,  $color1 $start, $color2 $end); /* W3C */
}

@mixin user-select($value) {
  -webkit-user-select: $value;
  @if $support-ff {
    -moz-user-select: $value;
  }
  @if $support-ms {
    -ms-user-select: $value;
  }
  user-select: $value;
}

@mixin transform($value) {
  -webkit-transform: $value;
  @if $support-ff {
    -moz-transform: $value;
  }
  @if $support-ms {
    -ms-transform: $value;
  }
  -o-transform: $value;
  transform: $value;
}

@mixin opacity($value) {
  @if $support-ms {
    -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=#{$value*100})";
  }
  filter: alpha(opacity=$value*100);
  -khtml-opacity: $value;
  @if $support-ff {
    -moz-opacity: $value;
  }
  opacity: $value;
}


@mixin set-text-overflow() {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

@mixin background-size($size) {
  background-size: $size;
  -webkit-background-size: $size;
  @if $support-ff {
    -moz-background-size: $size;
  }
  -o-background-size: $size;
  @if $support-ms {
    -ms-background-size: $size;
  }
}

/*
As you can see, this mixin adds a lot of browser-specific
selectors, so use with caution as it'll bloat your CSS
*/
@mixin set-box-align($halign, $orient, $valign) {
  display: -webkit-box;
  @if $support-ff {
    display: -moz-box;
  }
  @if $support-ms {
    display: -ms-box;
  }
  display: box;
  
  -webkit-box-align: $valign;
  @if $support-ff {
    -moz-box-align: $valign;
  }
  @if $support-ms {
    -ms-box-align: $valign;
  }
  box-align: $valign;
  
  -webkit-box-orient: $orient;
  @if $support-ff {
    -moz-box-orient: $orient;
  }
  @if $support-ms {
    -ms-box-orient: $orient;
  }
  box-orient: $orient;

  -webkit-box-pack: $halign;
  @if $support-ff {
    -moz-box-pack: $halign;
  }
  @if $support-ms {
    -ms-box-pack: $halign;
  }
  box-pack: $halign;
}

/* 
  Rather than increase the number of images on the app, use this mixin to add CSS arrows
  to the edges of block elements  - see www.cssarrowplease.com for demos
*/
@mixin css-arrow($pos, $relative-pos, $size, $colour, $border-width, $border-colour) {
  $flip: top;
  @if $pos == top {
    $flip: bottom;
  } @else if $pos == bottom {
    $flip: top;
  } @else if $pos == left {
    $flip: right;
  } @else if $pos == right {
    $flip: left;
  }
	position: relative;
	background-color: $colour;
	border: $border-width solid $border-colour;

  &:after, &:before {
    #{$flip}: 100%;
  	border: solid transparent;
  	content: " ";
  	height: 0;
  	width: 0;
  	position: absolute;
  	pointer-events: none;
  }
  
  &:after {
  	border-#{$flip}-color: $colour;
  	border-width: $size;
    @if $pos == top {
      left: $relative-pos;
      margin-left: -$size;
    } @else if $pos == bottom {
      left: $relative-pos;
      margin-left: -$size;
    } @else if $pos == left {
      top: $relative-pos;
      margin-top: -$size;
    } @else if $pos == right {
      top: $relative-pos;
      margin-top: -$size;
    }
  	
  }
  
  &:before {
  	border-#{$flip}-color: $border-colour;
  	border-width: $size+$border-width;
    @if $pos == top {
    	left: $relative-pos;
    	margin-left: -($size+$border-width);
    } @else if $pos == bottom {
    	left: $relative-pos;
    	margin-left: -($size+$border-width);
    } @else if $pos == left {
    	top: $relative-pos;
    	margin-top: -($size+$border-width);
    } @else if $pos == right {
    	top: $relative-pos;
    	margin-top: -($size+$border-width);
    }
  }

}
